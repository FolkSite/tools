#!/usr/bin/php
<?php

class BABitrixCli {

  private $argv;
  public function __construct() {
    global $argv;
    $this->argv = $argv;
    if(!isset($this->argv[1])) {
      $this->help();
    }
    $this->dir = getcwd();
  }

  public function error() {
    $this->getConfig();
    $logFile =& $this->config['exception_handling']['value']['log']['settings']['file'];
    if(!isset($logFile) || !$logFile) throw new Exception("Empty settings: log file");
    $cmd = 'tail '.escapeshellarg($logFile);
    echo shell_exec($cmd);
    die();
  }

  public function db() {
    $this->getConfig();
    $connection =& $this->config['connections']['value']['default'];
    if(!isset($connection) || !$connection) throw new Exception("Empty settings: connections");
    $this->showVar($connection);
    die();
  }

  public function show() {
    if(!isset($this->argv[2])) throw new Exception("Use bitrix --[element|section|iblock|user] [ID]");

    switch($this->argv[1]) {
      case '--element':
      case '-e':
        $this->showElement($this->argv[2]);
        break;
      case '--user':
      case '-u':
        $this->showUser($this->argv[2]);
        break;
      case '--section':
      case '-s':
        $this->showSection($this->argv[2]);
        break;
      case '--iblock':
      case '-i':
        $this->showIblock($this->argv[2]);
      default:
        throw new Exception("Under construction");
    }
  }

  private function showIblock($_id) {
    if(!is_numeric($_id)) throw new Exception("iblock ID must be a number", 1);
    $id = (int)$_id;
    $arFilter = array('id' => $id);
    $rs = CIBlock::GetList($arOrder = array("SORT"=>"ASC"), $arFilter, $bIncCnt = true);
    if($rs->SelectedRowsCount() == 0) throw new Exception("Can not find iblock by ID: ".$_id, 1);
    $item = $rs->Fetch();
    $this->showVar($item);
    die();
  }

  private function showSection($_id) {
    if(!is_numeric($_id)) throw new Exception("section ID must be a number", 1);
    $id = (int)$_id;
    $arFilter = array('id' => $id);
    $arSelect = array('*');
    $rs = CIBlockSection::GetList($arOrder = array("SORT"=>"ASC"), $arFilter, $bIncCnt = true, $arSelect, false);
    if($rs->SelectedRowsCount() == 0) throw new Exception("Can not find section by ID: ".$_id, 1);
    $item = $rs->Fetch();
    $this->showVar($item);
    die();
  }

  private function showUser($_id) {
    if(!is_numeric($_id)) throw new Exception("user ID must be a number", 1);
    $id = (int)$_id;
    $rs = CUser::GetByID($id);
    if($rs->SelectedRowsCount() == 0) throw new Exception("Can not find user by ID: ".$_id, 1);
    $item = $rs->Fetch();
    $this->showVar($item);
    die();
  }

  private function showElement($_id) {
    if(!is_numeric($_id)) throw new Exception("user ID must be a number", 1);
    $id = (int)$_id;
    $arSort = array("SORT" => "ASC");
    $arFilter = array("ID" => $id);
    $arSelect = array("*");
    $arNavStartParams = false;
    $rs = CIBlockElement::GetList($arSort, $arFilter, false, $arNavStartParams, $arSelect);
    if($rs->SelectedRowsCount() == 0) throw new Exception("Can not find element ID: $_id");
    $item = $rs->Fetch();
    $this->showVar($item);
  }

  public function component() {
    $file = $this->argv[2];
    if(!$file || !file_exists($file)) throw new Exception("File not exists: ".$file.PHP_EOL);
    $file = file_get_contents($file);
    if(preg_match_all('~\$APPLICATION\s*->\s*IncludeComponent\s*\(\s*["|\'](.*?)["|\']~i', $file, $m)) {
      $this->showVar($m[1]);
    } else {
      echo 'No "$APPLICATION->IncludeComponent" founded';
    }
    die();
  }

  private $rootDir, $settingsFile, $config, $dir;
  public function getConfig() {
    $this->findrootDir($this->dir);
    $this->loadBitrixConfig();
  }

  private function loadBitrixConfig() {
    $this->config = include($this->settingsFile);
  }

  public function getRootDir() {
    return $this->rootDir;
  }

  private function findrootDir($dir) {
    if(!$dir || $dir == '/') throw new Exception("Can not find bitrix root dir");
    $settingsFile = $dir . '/bitrix/.settings.php';
    if(file_exists($settingsFile)) {
      $this->rootDir = $dir;
      $this->settingsFile = $settingsFile;
      chdir($this->rootDir);
      return;
    }
    return $this->findrootDir(dirname($dir));
  }

  public function showError(Exception $e) {
    fwrite(STDERR, $e->getMessage().PHP_EOL);
    die();
  }

  private $bold = "\033[1m", $nobold = "\033[0m";
  public function help() {
    $bold =& $this->bold;
    $nobold =& $this->nobold;
    echo "{$bold}NAME{$nobold}".PHP_EOL;
    echo "\tbitrix - CLI utility for CMS Bitrix".PHP_EOL.PHP_EOL;
    echo "{$bold}SYNOPSIS{$nobold}".PHP_EOL;
    echo "\tbitrix [OPTION]... [FILE]".PHP_EOL.PHP_EOL;
    echo "{$bold}DESCRIPTION{$nobold}".PHP_EOL.PHP_EOL;

    echo "\t{$bold}--error{$nobold}".PHP_EOL;
    echo "\t\tshow last error from error log".PHP_EOL.PHP_EOL;

    echo "\t{$bold}--db{$nobold}".PHP_EOL;
    echo "\t\tshow db config".PHP_EOL.PHP_EOL;

    echo "\t{$bold}-[e|s|i|u], --[element|section|iblock|user]{$nobold} [ID]".PHP_EOL;
    echo "\t\tget info about Infoblock element/section/iblock/user ID".PHP_EOL.PHP_EOL;

    echo "\t{$bold}--component{$nobold} [FILE]".PHP_EOL;
    echo "\t\tshow components in file".PHP_EOL.PHP_EOL;
    die();
  }

  private function showVar($_var) {
    $var = !defined('LANG_CHARSET') || LANG_CHARSET == 'UTF-8' ? $_var : $this->iconvArray(LANG_CHARSET, 'utf-8', $_var);
    var_dump($var);
  }

  private function iconvArray($charset_from, $charset_to, $arData) {
    $arTmp = array();
    foreach($arData as $k => $_v)
    {
      if(is_array($_v)) {
        $v = $this->iconvArray($charset_from, $charset_to, $_v);
      } else {
        $v = iconv($charset_from, $charset_to.'//IGNORE', $_v);
        if(empty($v)) $v = iconv($charset_from, $charset_to.'//TRANSLIT', $_v);
      }
      $k = iconv($charset_from, $charset_to.'//IGNORE', $k);
      $arTmp[$k] = $v;
    }
    return $arTmp;
  }
}

error_reporting(E_ERROR | E_WARNING | E_PARSE);

$cli = new BABitrixCli();

try {
  switch ($argv[1]) {
    case '--help':
      $cli->help();
      break;
    case '--error':
      $cli->error();
      break;
    case '--db':
      $cli->db();
      break;
    case '--element':
    case '-e':
    case '--section':
    case '-s':
    case '--iblock':
    case '-i':
    case '--user':
    case '-u':
      // Нельзя помещать подключение битрикса в функцию - не работает :)
      $cli->getConfig();
      $_SERVER["DOCUMENT_ROOT"] = $cli->getRootDir();
      define("LANGUAGE_ID", "ru");
      define("NO_KEEP_STATISTIC", true);
      define("NOT_CHECK_PERMISSIONS", true);
      require($_SERVER["DOCUMENT_ROOT"]."/bitrix/modules/main/include/prolog_before.php");
      if(!CModule::IncludeModule('iblock')) throw new Exception("Can not include iblock");
      $cli->show();
      break;
    case '--component':
      $cli->component();
      break;
    default:
      $cli->help();
  }
} catch (Exception $e) {
  $cli->showError($e);
}

